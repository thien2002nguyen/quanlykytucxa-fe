"use client";

import { ParameterPostContract } from "@/store/contracts/contracts.type";
import {
  Breadcrumb,
  Button,
  Checkbox,
  Col,
  Empty,
  Flex,
  Form,
  Image,
  List,
  Row,
  Select,
} from "antd";
import React, { useEffect, useState } from "react";
import "./style.scss";
import { useRouter, useSearchParams } from "next/navigation";
import { useAppDispatch, useAppSelector } from "@/store";
import { getInfomationStudentAction } from "@/store/students/students.action";
import { GenderEnum } from "@/store/students/students.type";
import { getDetailRoomAction } from "@/store/rooms/rooms.action";
import { formatVND } from "@/utils/formatMoney";
import { getContractTypesAction } from "@/store/contract-types/contract-types.action";
import { getContractTermsAction } from "@/store/contract-terms/contract-terms.action";
import { TimeUnitEnum } from "@/store/contract-types/contract-types.type";
import { getServicesAction } from "@/store/services/services.action";
import { postContractAction } from "@/store/contracts/contracts.action";
import { IMAGE_NOT_FOUND } from "@/utils/contants";
import { toast } from "react-toastify";
import { formatSchedule } from "@/utils/formatSchedule";
import { AppstoreOutlined, HomeOutlined } from "@ant-design/icons";

const RegisterRoomPage = () => {
  const [formRef] = Form.useForm<ParameterPostContract>();
  const searchParams = useSearchParams();
  const router = useRouter();
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state) => state.authSlice);
  const { dataAuthMeStudent } = useAppSelector((state) => state.studentsSlice);
  const { dataDetailRoom } = useAppSelector((state) => state.roomsSlice);
  const { dataServices } = useAppSelector((state) => state.servicesSlice);

  const { dataContractTerms } = useAppSelector(
    (state) => state.contractTermsSlice
  );
  const { dataContractTypes } = useAppSelector(
    (state) => state.contractTypesSlice
  );

  const optionsContractType = dataContractTypes.data?.map((item) => ({
    value: item._id,
    label: `${item.title} - ${item.duration} ${
      (item.unit === TimeUnitEnum.DAY && "Ng√†y") ||
      (item.unit === TimeUnitEnum.MONTH && "Th√°ng") ||
      "NƒÉm"
    }`,
  }));

  const optionsService = dataServices.data?.map((item) => ({
    value: item._id,
    label: `${item.name} - ${formatVND(item.price || 0)} VNƒê - ${formatSchedule(
      item.schedule || []
    )}`,
  }));

  const [accepted, setAccepted] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  useEffect(() => {
    dispatch(getInfomationStudentAction());
    dispatch(getDetailRoomAction(searchParams.get("roomSlug") as string));
    dispatch(getContractTypesAction());
    dispatch(getContractTermsAction());
    dispatch(getServicesAction());
  }, [dispatch]);

  const handleCheckboxChange = (e: any) => {
    setAccepted(e.target.checked); // L·∫•y tr·∫°ng th√°i t·ª´ Checkbox
  };

  const onFinish = async (values: any) => {
    setIsLoading(true);

    const servicesSelected = values.services?.map((item: any) => ({
      serviceId: item,
    }));

    const dataPost: ParameterPostContract = {
      fullName: dataAuthMeStudent.data?.fullName || "",
      studentCode: dataAuthMeStudent.data?.studentCode || "",
      email: user.email || "",
      phoneNumber: user.phoneNumber || "",
      roomId: dataDetailRoom.data._id,
      services: servicesSelected,
      contractTypeId: values.contractTypeId,
    };

    const response = await dispatch(postContractAction(dataPost));

    if (response?.payload?.error) {
      toast.error(
        `ü¶Ñ ${response.payload.error || "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau."}`
      );
    } else {
      toast.success(
        `ü¶Ñ ƒêƒÉng k√Ω ph√≤ng th√†nh c√¥ng. Vui l√≤ng ch·ªù x√©t duy·ªát h·ª£p ƒë·ªìng.`
      );
      dispatch(getInfomationStudentAction());
      onReset();
      router.push("/ky-tuc-xa/phong-ky-tuc-xa");
    }

    setIsLoading(false);
  };

  const onReset = () => {
    formRef.resetFields();
  };

  return (
    <>
      <div className="wrapper-main-content wrapper-register-room-page">
        <Flex
          justify="space-between"
          align="flex-start"
          className="wrapper-main-content-head"
        >
          <Breadcrumb
            items={[
              {
                href: "/",
                title: <HomeOutlined />,
              },
              {
                href: "/ky-tuc-xa/phong-ky-tuc-xa",
                title: (
                  <>
                    <AppstoreOutlined />
                    <span>Ph√≤ng k√Ω t√∫c x√°</span>
                  </>
                ),
              },
              {
                title: "ƒêƒÉng k√Ω ph√≤ng",
              },
            ]}
          />

          <Button type="primary" href={searchParams.get("rollBack") as string}>
            Quay l·∫°i
          </Button>
        </Flex>

        <div className="wrapper-main-content-body">
          <Form
            name="form-register-room"
            initialValues={{ remember: true }}
            onFinish={onFinish}
            onReset={onReset}
            autoComplete="off"
            layout="vertical"
            form={formRef}
          >
            <div className="infomation-student">
              <h4 className="title-form">Th√¥ng tin c√° nh√¢n</h4>
              <p>
                <strong>M√£ s·ªë sinh vi√™n: </strong>
                {dataAuthMeStudent.data?.studentCode}
              </p>
              <p>
                <strong>H·ªç v√† t√™n: </strong>
                {dataAuthMeStudent.data?.fullName}
              </p>
              <p>
                <strong>Email: </strong>
                {user.email}
              </p>
              <p>
                <strong>S·ªë ƒëi·ªán tho·∫°i: </strong>
                {user.phoneNumber}
              </p>
              <small>
                (N·∫øu c√≥ b·∫•t k·ª≥ th√¥ng tin sai s√≥t n√†o, vui l√≤ng li√™n h·ªá v·ªõi ban
                qu·∫£n l√Ω k√Ω t√∫c x√° ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ v√† c·∫≠p nh·∫≠t th√¥ng tin ch√≠nh
                x√°c).
              </small>
            </div>

            <h4 className="title-form">N·ªôi dung h·ª£p ƒë·ªìng</h4>

            <Form.Item label="Th√¥ng tin ph√≤ng">
              <Row
                gutter={[
                  { xs: 0, sm: 16, md: 16, lg: 16, xl: 16 },
                  { xs: 12, sm: 0, md: 0, lg: 0, xl: 0 },
                ]}
              >
                <Col xs={24} sm={12} md={12} lg={12} xl={12}>
                  <Image
                    src={dataDetailRoom.data?.thumbnail || IMAGE_NOT_FOUND}
                    preview={false}
                  />
                </Col>
                <Col xs={24} sm={12} md={12} lg={12} xl={12}>
                  <div className="infomation-room">
                    <p className="infomation-room-title">
                      {dataDetailRoom.data?.roomName} - T·∫ßng{" "}
                      {dataDetailRoom.data?.floor}
                    </p>
                    <p>
                      <strong>Lo·∫°i ph√≤ng: </strong>
                      {dataDetailRoom.data?.roomTypeId?.type}
                    </p>
                    <p>
                      <strong>D√£y ph√≤ng: </strong>
                      {dataDetailRoom.data?.roomBlockId?.name}
                    </p>
                    <p>
                      <strong>S·ª©c ch·ª©a: </strong>
                      {dataDetailRoom.data?.registeredStudents}/
                      {dataDetailRoom.data?.maximumCapacity} ng∆∞·ªùi
                    </p>
                    <p>
                      <strong>Gi√° ph√≤ng: </strong>
                      {formatVND(
                        dataDetailRoom.data?.roomTypeId?.price || 0
                      )}{" "}
                      VNƒê
                    </p>
                  </div>
                </Col>
              </Row>
            </Form.Item>

            <Row
              gutter={[
                { xs: 0, sm: 16, md: 16, lg: 16, xl: 16 },
                { xs: 12, sm: 0, md: 0, lg: 0, xl: 0 },
              ]}
            >
              <Col xs={24} sm={12} md={12} lg={12} xl={12}>
                <Form.Item
                  name="contractTypeId"
                  label="Lo·∫°i h·ª£p ƒë·ªìng"
                  rules={[
                    {
                      required: true,
                      message: "Vui l√≤ng ch·ªçn lo·∫°i h·ª£p ƒë·ªìng!",
                    },
                  ]}
                >
                  <Select
                    getPopupContainer={(triggerNode) => triggerNode.parentNode}
                    allowClear
                    options={optionsContractType}
                    placeholder="Ch·ªçn lo·∫°i h·ª£p ƒë·ªìng"
                    maxTagCount="responsive"
                  />
                </Form.Item>
              </Col>
              <Col xs={24} sm={12} md={12} lg={12} xl={12}>
                <Form.Item name="services" label="D·ªãch v·ª•">
                  <Select
                    getPopupContainer={(triggerNode) => triggerNode.parentNode}
                    mode="multiple"
                    allowClear
                    options={optionsService}
                    placeholder="Ch·ªçn d·ªãch v·ª•"
                    maxTagCount="responsive"
                  />
                </Form.Item>
              </Col>
            </Row>

            <h4 className="title-form">ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng</h4>

            <div className="infomation-contract-term">
              <List
                locale={{
                  emptyText: (
                    <Empty
                      description="Kh√¥ng c√≥ ƒëi·ªÅu kho·∫£n h·ª£p ƒë·ªìng n√†o"
                      image={Empty.PRESENTED_IMAGE_SIMPLE}
                    />
                  ),
                }}
                size="small"
                dataSource={dataContractTerms.data}
                bordered
                renderItem={(item, index) => (
                  <List.Item key={item._id}>
                    {index + 1}. {item.content}
                  </List.Item>
                )}
              />
            </div>

            <Form.Item>
              <Checkbox checked={accepted} onChange={handleCheckboxChange}>
                ƒê·ªìng √Ω ƒëi·ªÅu kho·∫£n h·ª£p ƒë·ªìng
              </Checkbox>
            </Form.Item>

            <div className="form-footer">
              <Flex gap={8} justify="flex-end">
                <Button htmlType="reset">H·ªßy</Button>
                <Button
                  disabled={!accepted}
                  type="primary"
                  htmlType="submit"
                  loading={isLoading}
                >
                  ƒêƒÉng k√Ω ph√≤ng
                </Button>
              </Flex>
            </div>
          </Form>
        </div>
      </div>
    </>
  );
};

export default RegisterRoomPage;
